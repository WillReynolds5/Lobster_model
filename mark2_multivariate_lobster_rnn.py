# -*- coding: utf-8 -*-
"""MARK2_Multivariate_Lobster_RNN

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fQ1ZW57r_kyTzISydL7k2iii8Wi9pG4B
"""

import numpy as np
import pandas as pd
import tensorflow as tf
import tensorboardcolab


from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import RNN
from keras import optimizers


from keras.layers import Dropout

import matplotlib.pyplot as plt
# %matplotlib inline

from google.colab import files
uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))



import io

# Lobster_df = pd.read_csv(io.StringIO(uploaded['Lobster_Model_ONly_lobster.csv'].decode('utf-8')), index_col='Weeks')
Lobster_df = pd.read_csv(io.StringIO(uploaded['Lobster_Model_Weekly_Data.csv'].decode('utf-8')), index_col='Weeks')
# Lobster_df = pd.read_csv(io.StringIO(uploaded['Lobster_Model_Weekly_Data _N0_INDEX.csv'].decode('utf-8')))

# total_lobster_df.index = pd.to_datetime(total_lobster_df.index)
Lobster_df.index = Lobster_df.index

# total_lobster_df

# print(total_lobster_df['Total Lobster'][5110])
print(Lobster_df['Total Lobster'][167])

train_set = Lobster_df.head(676)
test_set = Lobster_df.tail(52)

# train_set = total_lobster_df.head(4745)
# test_set = total_lobster_df.tail(365)

train_set.tail()

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
train_scaled = scaler.fit_transform(train_set)
test_scaled = scaler.transform(test_set)

print(train_scaled[:5])

# print(train_scaled)
# for i in train_scaled:
#   print(i)
# print(test_scaled)

#train_scaled
y_train = train_scaled[:,:-1]
x_train = train_scaled[:, -1:]

#test scaled
y_test = test_scaled[:,:-1]
x_test = test_scaled[:, -1:]


# print(x_train)

# print(y_test.shape)
# x_train[-5:]

# x_train = x_train[0



x_train = np.array(x_train.reshape((x_train.shape[0],1,x_train.shape[1])))
x_test = np.array(x_test.reshape((x_test.shape[0],1,x_test.shape[1])))
print((x_train.shape, x_train.shape))

regressor = Sequential()

input_1 = LSTM(100, return_sequences = True, input_shape = (1,1))
# input_1 = LSTM(1, return_sequences = False, input_shape = (x_train.shape[1], x_train.shape[2]))



regressor.add(input_1)

regressor.add(LSTM(200, return_sequences = True))

regressor.add(LSTM(200, return_sequences = True))

regressor.add(LSTM(100, return_sequences = False))

# print(regressor.get_layer(index=0))

regressor.add(Dense(1))

learning_rate = optimizers.SGD(lr=0.001)

regressor.compile(optimizer = 'adam', loss = 'mae')

print()

regressor.fit(x_train, y_train, epochs = 200, batch_size = 52, verbose=2, shuffle=True)

# print(x_train[-52:])

yhat = regressor.predict([x_train[-52:], y_train[-52:]])

print(yhat)

test_set['Generated'] = yhat

test_set

plt.plot(test_set['Total Lobster'],'b',test_set['Generated'],'r')

